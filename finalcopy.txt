# -*- coding: utf-8 -*-
"""
Created on Tue Apr 23 02:23:12 2019

@author: SA066118
"""


from flask import Flask
from flask import request
import json

import pandas as pd
import networkx as nx
from operator import itemgetter
import time

#read data for join between tables
df = pd.read_csv("tablefile.csv")
df["main"] = df["T1"] + " "+df["T2"] 
#df = df[df['Count']>2]
#store all tables in series
table_names = pd.Series()
table_names = table_names.append(df["T1"])
table_names= table_names.append(df["T2"])
table_names.sort_values(inplace=True)
#create a set of table names
table_names = set(table_names)

#create dictionaries to store tables
table_dict = {}
table_dict_rev = {}
table_column = {}
count = 0

for i in table_names:
    table_dict[i] = count
    table_dict_rev[count] = i
    count += 1

newdf = pd.read_csv('searchfile.csv')

with open('newdict.txt') as json_file:  
    newdict_temp = json.load(json_file)


newdict2 = {}
for (key,value) in newdict_temp.items():
    newdict2[key] = set(value)

newdict_temp  = newdict2


df["table_column"] = df["T1"] + " " + df["T2"] + "-" + df["T1C"] + " " + df["T2C"] 

for i in df["table_column"]:
      rz = i.split("-")
      if rz[0] in table_column:
           rzz = rz[1].split(" ")
           azz = table_column[rz[0]].split(" ")
           
           continue
      table_column[rz[0]] = rz[1]
      
# create graph 
G = nx.Graph()

# add tables as graph nodes
for i  in df["main"]:
     r = i.split(" ")
     G.add_edge(table_dict[r[0]],table_dict[r[1]])

app = Flask(__name__)

@app.route('/')
def home():
    return ""

@app.route('/getpath', methods=['GET'])
def foo():
    dictfinal = {}
    
    list_of_tables = [table_dict[str(request.args.get('table1'))]]
    for k in list_of_tables:
        started = time.time()
        for j in [table_dict[str(request.args.get('table2'))]]:
            
            s = k ; d = j
            if s == d:
                continue
            
            #Find the shortest path from source to destination based on hops
            paths = [p for p in nx.all_simple_paths(G, source=s, target=d,cutoff = 4)]
			if len(paths) == 0:
                paths = [p for p in nx.all_shortest_paths(G, source=s, target=d)]
            print(paths)
            paths_len = []
            paths_len = paths
            for i in paths_len:
                i.append(len(i))
            
            paths_len = sorted(paths_len, key=itemgetter(-1))
            paths_len = paths_len[:100]    
            for i in paths_len:
                del i[-1]
            
            newdf  = pd.read_csv('newdf.csv')
            start = time.time()
            pather = []
            
            for path in paths_len:
                counts = 0
    #            print(newdict_temp[str(path[0])])
                inter = set(newdict_temp[str(path[0])])
                #print(inter)
                for table in path[1:]:
                    inter = set.intersection(inter, newdict_temp[str(table)])
                    #print(inter)
                for row in inter:
                    counts+=newdf['Count'][row]
                 
                pather.append(counts)
          
            end = time.time()
            
            print("Time taken: " , end-start)
            
            # sort paths based on count values used in scripts
            final_sort_paths = []    
            final_sort_paths = paths_len
            
            count = 0 
            for i in final_sort_paths:
                i.append(len(i))
                i.append(-1 *pather[count])
                count = count + 1
                
            # = sorted(final_sort_paths, key=itemgetter(-1))
            final_sort_paths = sorted(final_sort_paths, key = lambda x: (x[-2], x[-1]))
            pther = []
            for i in final_sort_paths:
                pther.append(-1*i[-1])
                del i[-1]
                del i[-1] 
             
            
            # Print paths
            print("Paths-------->" + table_dict_rev[s] + " to " + table_dict_rev[d] + "\n" )
            ind= 0
            tables = []
            columns = []
            for i in final_sort_paths[:20]:
                temp = ""
                for j in i:
                    temp += table_dict_rev[j] + " "
    
                tables.append(temp.split())
                
                col = ""
                for x in range(len(i) - 1):
                      ys = table_dict_rev[i[x]] + " " + table_dict_rev[i[x + 1]]
                      try:
                          nn = table_column[ys]
                          col = col + nn + " "
                          
                      except KeyError:
                          nn = table_column[table_dict_rev[i[x + 1]] + " " + table_dict_rev[i[x]]]
                          nns = nn.split(" ")
                          col = col + nns[1]+ " "+nns[0] +" "
                          
                columns.append(col.split())
                ind = ind + 1
                
            dictfinal[str((table_dict_rev[s],table_dict_rev[d]))] = [tables,columns]
        
        ended = time.time()
        print("Total Time Taken:", ended-started)
        
    print(dictfinal)
   
    
    return json.dumps(dictfinal)

if __name__ == "__main__":
    app.run(debug=True, port=5001)

